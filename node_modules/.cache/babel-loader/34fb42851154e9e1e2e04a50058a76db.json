{"ast":null,"code":"var _jsxFileName = \"/home/makss99/Desktop/react/practice/netflix-clone/src/components/accordion/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nimport { Container, Inner, Header, Frame, Item, Top, Title, Dropdown, Body } from \"./styles/accordion\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Accordion({\n  children,\n  ...restProps\n}) {\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Inner, {\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n_c = Accordion;\nconst ToggleContext = /*#__PURE__*/createContext();\n\nAccordion.Header = function AccordionHeader({\n  children,\n  ...restProps\n}) {\n  return /*#__PURE__*/_jsxDEV(Header, { ...restProps,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 10\n  }, this);\n};\n\nAccordion.Frame = function AccordionFrame({\n  children,\n  ...restProps\n}) {\n  return /*#__PURE__*/_jsxDEV(Frame, { ...restProps,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n};\n\nAccordion.Item = _s(function AccordionItem({\n  children,\n  ...restProps\n}) {\n  _s();\n\n  // useState will be responsible for dropdown and button icon change, But we need to open it and close it only\n  // When we click on the Top part not the dropdown, So we gotta pass the useState to the Top\n  const [toggleShow, setToggleShow] = useState(false);\n  console.log(toggleShow);\n  return /*#__PURE__*/_jsxDEV(ToggleContext.Provider, {\n    value: {\n      toggleShow,\n      setToggleShow\n    },\n    children: /*#__PURE__*/_jsxDEV(Item, { ...restProps,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}, \"tCX/VzjJ88VBg9+I9/DmKaZ9kqM=\");\nAccordion.Top = _s2(function AccordionTop({\n  children,\n  ...restProps\n}) {\n  _s2();\n\n  // Thats where we get our useState through the context and might as well\n  // destructure it\n  const {\n    toggleShow,\n    setToggleShow\n  } = useContext(ToggleContext);\n  return /*#__PURE__*/_jsxDEV(Top, {\n    onClick: () => setToggleShow(toggleShow => !toggleShow),\n    ...restProps,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}, \"TK/oZdgUDCvLrKWRR9mTHBf6KYY=\");\n\nAccordion.Title = function AccordionTitle({\n  children,\n  ...restProps\n}) {\n  return /*#__PURE__*/_jsxDEV(Title, { ...restProps,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n};\n\nAccordion.Dropdown = _s3(function AccordionDropdown({\n  children,\n  ...restProps\n}) {\n  _s3();\n\n  const {\n    toggleShow\n  } = useContext(ToggleContext); // In here I could check state ? true then display dropdown : don't\n  // But then you won't have that nice sliding down animation so I would rather\n  // Add the class based on the state and do the animation in css\n\n  return /*#__PURE__*/_jsxDEV(Dropdown, {\n    className: toggleShow ? \"dropdown-unactive\" : \"dropdown-active\",\n    ...restProps,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}, \"3GdtCldLvewOgpnz6EBMvQFgAf4=\");\n\nAccordion.Body = function AccordionBody({\n  children,\n  ...restProps\n}) {\n  return /*#__PURE__*/_jsxDEV(Body, { ...restProps,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 10\n  }, this);\n};\n\nAccordion.Button = function AccordionButton({\n  children,\n  ...restProps\n}) {\n  return /*#__PURE__*/_jsxDEV(Button, { ...restProps,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 10\n  }, this);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Accordion\");","map":{"version":3,"sources":["/home/makss99/Desktop/react/practice/netflix-clone/src/components/accordion/index.js"],"names":["createContext","useContext","useState","Container","Inner","Header","Frame","Item","Top","Title","Dropdown","Body","Accordion","children","restProps","ToggleContext","AccordionHeader","AccordionFrame","AccordionItem","toggleShow","setToggleShow","console","log","AccordionTop","AccordionTitle","AccordionDropdown","AccordionBody","Button","AccordionButton"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from \"react\"\nimport {\n  Container,\n  Inner,\n  Header,\n  Frame,\n  Item,\n  Top,\n  Title,\n  Dropdown,\n  Body,\n} from \"./styles/accordion\"\n\nexport default function Accordion({ children, ...restProps }) {\n  return (\n    <Container>\n      <Inner>{children}</Inner>\n    </Container>\n  )\n}\n\nconst ToggleContext = createContext()\n\nAccordion.Header = function AccordionHeader({ children, ...restProps }) {\n  return <Header {...restProps}>{children}</Header>\n}\n\nAccordion.Frame = function AccordionFrame({ children, ...restProps }) {\n  return <Frame {...restProps}>{children}</Frame>\n}\n\nAccordion.Item = function AccordionItem({ children, ...restProps }) {\n  // useState will be responsible for dropdown and button icon change, But we need to open it and close it only\n  // When we click on the Top part not the dropdown, So we gotta pass the useState to the Top\n  const [toggleShow, setToggleShow] = useState(false)\n  console.log(toggleShow)\n\n  return (\n    <ToggleContext.Provider value={{ toggleShow, setToggleShow }}>\n      <Item {...restProps}>{children}</Item>\n    </ToggleContext.Provider>\n  )\n}\n\nAccordion.Top = function AccordionTop({ children, ...restProps }) {\n  // Thats where we get our useState through the context and might as well\n  // destructure it\n  const { toggleShow, setToggleShow } = useContext(ToggleContext)\n\n  return (\n    <Top\n      onClick={() => setToggleShow((toggleShow) => !toggleShow)}\n      {...restProps}\n    >\n      {children}\n    </Top>\n  )\n}\n\nAccordion.Title = function AccordionTitle({ children, ...restProps }) {\n  return <Title {...restProps}>{children}</Title>\n}\n\nAccordion.Dropdown = function AccordionDropdown({ children, ...restProps }) {\n  const { toggleShow } = useContext(ToggleContext)\n  // In here I could check state ? true then display dropdown : don't\n  // But then you won't have that nice sliding down animation so I would rather\n  // Add the class based on the state and do the animation in css\n  return (\n    <Dropdown\n      className={toggleShow ? \"dropdown-unactive\" : \"dropdown-active\"}\n      {...restProps}\n    >\n      {children}\n    </Dropdown>\n  )\n}\n\nAccordion.Body = function AccordionBody({ children, ...restProps }) {\n  return <Body {...restProps}>{children}</Body>\n}\n\nAccordion.Button = function AccordionButton({ children, ...restProps}) {\n  return <Button {...restProps} >{children}</Button>\n}"]},"metadata":{},"sourceType":"module"}