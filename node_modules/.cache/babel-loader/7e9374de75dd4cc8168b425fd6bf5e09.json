{"ast":null,"code":"import _slicedToArray from\"/home/makss99/Desktop/react/practice/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/home/makss99/Desktop/react/practice/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/home/makss99/Desktop/react/practice/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import{createContext,useContext,useState}from\"react\";import{Container,Inner,Header,Frame,Item,Top,Title,Dropdown,Body,Button}from\"./styles/accordion\";import{jsx as _jsx}from\"react/jsx-runtime\";export default function Accordion(_ref){var children=_ref.children,restProps=_objectWithoutProperties(_ref,[\"children\"]);return/*#__PURE__*/_jsx(Container,{children:/*#__PURE__*/_jsx(Inner,{children:children})});}var ToggleContext=/*#__PURE__*/createContext();Accordion.Header=function AccordionHeader(_ref2){var children=_ref2.children,restProps=_objectWithoutProperties(_ref2,[\"children\"]);return/*#__PURE__*/_jsx(Header,_objectSpread(_objectSpread({},restProps),{},{children:children}));};Accordion.Frame=function AccordionFrame(_ref3){var children=_ref3.children,restProps=_objectWithoutProperties(_ref3,[\"children\"]);return/*#__PURE__*/_jsx(Frame,_objectSpread(_objectSpread({},restProps),{},{children:children}));};Accordion.Item=function AccordionItem(_ref4){var children=_ref4.children,restProps=_objectWithoutProperties(_ref4,[\"children\"]);// useState will be responsible for dropdown and button icon change, But we need to open it and close it only\n// When we click on the Top part not the dropdown, So we gotta pass the useState to the Top\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),toggleShow=_useState2[0],setToggleShow=_useState2[1];return/*#__PURE__*/_jsx(ToggleContext.Provider,{value:{toggleShow:toggleShow,setToggleShow:setToggleShow},children:/*#__PURE__*/_jsx(Item,_objectSpread(_objectSpread({},restProps),{},{children:children}))});};Accordion.Top=function AccordionTop(_ref5){var children=_ref5.children,restProps=_objectWithoutProperties(_ref5,[\"children\"]);// Thats where we get our useState through the context and might as well\n// destructure it\nvar _useContext=useContext(ToggleContext),toggleShow=_useContext.toggleShow,setToggleShow=_useContext.setToggleShow;return/*#__PURE__*/_jsx(Top,_objectSpread(_objectSpread({onClick:function onClick(){return setToggleShow(function(toggleShow){return!toggleShow;});}},restProps),{},{children:children}));};Accordion.Title=function AccordionTitle(_ref6){var children=_ref6.children,restProps=_objectWithoutProperties(_ref6,[\"children\"]);return/*#__PURE__*/_jsx(Title,_objectSpread(_objectSpread({},restProps),{},{children:children}));};Accordion.Dropdown=function AccordionDropdown(_ref7){var children=_ref7.children,restProps=_objectWithoutProperties(_ref7,[\"children\"]);var _useContext2=useContext(ToggleContext),toggleShow=_useContext2.toggleShow;// In here I could check state ? true then display dropdown : don't\n// But then you won't have that nice sliding down animation so I would rather\n// Add the class based on the state and do the animation in css\nvar dropdown_unactive={maxHeight:\"0\",overflowY:\"hidden\"};var dropdown_active={maxHeight:\"500px\"};return/*#__PURE__*/_jsx(Dropdown,_objectSpread(_objectSpread({style:toggleShow?dropdown_active:dropdown_unactive},restProps),{},{children:children}));};Accordion.Body=function AccordionBody(_ref8){var children=_ref8.children,restProps=_objectWithoutProperties(_ref8,[\"children\"]);return/*#__PURE__*/_jsx(Body,_objectSpread(_objectSpread({},restProps),{},{children:children}));};Accordion.Button=function AccordionButton(_ref9){var children=_ref9.children,restProps=_objectWithoutProperties(_ref9,[\"children\"]);var _useContext3=useContext(ToggleContext),toggleShow=_useContext3.toggleShow;var button_active={transform:\"rotate(45deg)\"};return/*#__PURE__*/_jsx(Button,_objectSpread(_objectSpread({style:toggleShow?button_active:null},restProps),{},{children:children}));};","map":{"version":3,"sources":["/home/makss99/Desktop/react/practice/netflix-clone/src/components/accordion/index.js"],"names":["createContext","useContext","useState","Container","Inner","Header","Frame","Item","Top","Title","Dropdown","Body","Button","Accordion","children","restProps","ToggleContext","AccordionHeader","AccordionFrame","AccordionItem","toggleShow","setToggleShow","AccordionTop","AccordionTitle","AccordionDropdown","dropdown_unactive","maxHeight","overflowY","dropdown_active","AccordionBody","AccordionButton","button_active","transform"],"mappings":"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","sourcesContent":["import { createContext, useContext, useState } from \"react\"\nimport {\n  Container,\n  Inner,\n  Header,\n  Frame,\n  Item,\n  Top,\n  Title,\n  Dropdown,\n  Body,\n  Button,\n} from \"./styles/accordion\"\n\nexport default function Accordion({ children, ...restProps }) {\n  return (\n    <Container>\n      <Inner>{children}</Inner>\n    </Container>\n  )\n}\n\nconst ToggleContext = createContext()\n\nAccordion.Header = function AccordionHeader({ children, ...restProps }) {\n  return <Header {...restProps}>{children}</Header>\n}\n\nAccordion.Frame = function AccordionFrame({ children, ...restProps }) {\n  return <Frame {...restProps}>{children}</Frame>\n}\n\nAccordion.Item = function AccordionItem({ children, ...restProps }) {\n  // useState will be responsible for dropdown and button icon change, But we need to open it and close it only\n  // When we click on the Top part not the dropdown, So we gotta pass the useState to the Top\n  const [toggleShow, setToggleShow] = useState(false)\n\n  return (\n    <ToggleContext.Provider value={{ toggleShow, setToggleShow }}>\n      <Item {...restProps}>{children}</Item>\n    </ToggleContext.Provider>\n  )\n}\n\nAccordion.Top = function AccordionTop({ children, ...restProps }) {\n  // Thats where we get our useState through the context and might as well\n  // destructure it\n  const { toggleShow, setToggleShow } = useContext(ToggleContext)\n\n  return (\n    <Top\n      onClick={() => setToggleShow((toggleShow) => !toggleShow)}\n      {...restProps}\n    >\n      {children}\n    </Top>\n  )\n}\n\nAccordion.Title = function AccordionTitle({ children, ...restProps }) {\n  return <Title {...restProps}>{children}</Title>\n}\n\nAccordion.Dropdown = function AccordionDropdown({ children, ...restProps }) {\n  const { toggleShow } = useContext(ToggleContext)\n  // In here I could check state ? true then display dropdown : don't\n  // But then you won't have that nice sliding down animation so I would rather\n  // Add the class based on the state and do the animation in css\n\n  const dropdown_unactive = {\n    maxHeight: \"0\",\n    overflowY: \"hidden\",\n  }\n  const dropdown_active = {\n    maxHeight: \"500px\",\n  }\n  return (\n    <Dropdown\n      style={toggleShow ? dropdown_active : dropdown_unactive}\n      {...restProps}\n    >\n      {children}\n    </Dropdown>\n  )\n}\n\nAccordion.Body = function AccordionBody({ children, ...restProps }) {\n  return <Body {...restProps}>{children}</Body>\n}\n\nAccordion.Button = function AccordionButton({ children, ...restProps}) {\n  const {toggleShow} = useContext(ToggleContext)\n\n  const button_active = {\n    transform: \"rotate(45deg)\"\n  }\n\n  return <Button style={toggleShow ? button_active : null} {...restProps} >{children}</Button>\n}\n"]},"metadata":{},"sourceType":"module"}