{"ast":null,"code":"var _jsxFileName = \"/home/makss99/Desktop/react/practice/netflix-clone/src/helpers/routes.js\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { BROWSE } from \"../constants/routes\"; // check if the user is logged in when going on the singin & sign up page if he is not then allow them to go on it else redirect to browse page\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function IsUserRedirect({\n  user,\n  loggedInPath,\n  children,\n  ...rest\n}) {\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: () => {\n      if (!user) {\n        return children;\n      }\n\n      if (user) {\n        return /*#__PURE__*/_jsxDEV(Redirect, {\n          to: {\n            pathname: loggedInPath\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 13\n        }, this);\n      }\n    },\n    return: true,\n    null: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n} // If they not logged in and trying to access the browse page redirect them to the signin page\n\n_c = IsUserRedirect;\nexport function ProtectedRoute({\n  user,\n  children,\n  ...rest\n}) {\n  return /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: console.log({\n      location\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_c2 = ProtectedRoute;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"IsUserRedirect\");\n$RefreshReg$(_c2, \"ProtectedRoute\");","map":{"version":3,"sources":["/home/makss99/Desktop/react/practice/netflix-clone/src/helpers/routes.js"],"names":["Route","Redirect","BROWSE","IsUserRedirect","user","loggedInPath","children","rest","pathname","ProtectedRoute","console","log","location"],"mappings":";AAAA,SAASA,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAASC,MAAT,QAAuB,qBAAvB,C,CAEA;;;AACA,OAAO,SAASC,cAAT,CAAwB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,YAAR;AAAsBC,EAAAA,QAAtB;AAAgC,KAAGC;AAAnC,CAAxB,EAAmE;AACxE,sBACE,QAAC,KAAD,OACMA,IADN;AAEE,IAAA,MAAM,EAAE,MAAM;AACZ,UAAI,CAACH,IAAL,EAAW;AACT,eAAOE,QAAP;AACD;;AAED,UAAIF,IAAJ,EAAU;AACR,4BACE,QAAC,QAAD;AACE,UAAA,EAAE,EAAE;AACFI,YAAAA,QAAQ,EAAEH;AADR;AADN;AAAA;AAAA;AAAA;AAAA,gBADF;AAOD;AACF,KAhBH;AAiBE,IAAA,MAAM,MAjBR;AAkBE,IAAA,IAAI;AAlBN;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,C,CAGD;;KA1BgBF,c;AA2BhB,OAAO,SAASM,cAAT,CAAwB;AAACL,EAAAA,IAAD;AAAOE,EAAAA,QAAP;AAAiB,KAAGC;AAApB,CAAxB,EAAmD;AACxD,sBACE,QAAC,KAAD,OACMA,IADN;AAEE,IAAA,MAAM,EAAEG,OAAO,CAACC,GAAR,CAAY;AAAEC,MAAAA;AAAF,KAAZ;AAFV;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;MAPeH,c","sourcesContent":["import { Route, Redirect } from \"react-router-dom\"\nimport { BROWSE } from \"../constants/routes\"\n\n// check if the user is logged in when going on the singin & sign up page if he is not then allow them to go on it else redirect to browse page\nexport function IsUserRedirect({ user, loggedInPath, children, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={() => {\n        if (!user) {\n          return children\n        }\n\n        if (user) {\n          return (\n            <Redirect\n              to={{\n                pathname: loggedInPath,\n              }}\n            />\n          )\n        }\n      }}\n      return\n      null\n    />\n  )\n}\n\n\n// If they not logged in and trying to access the browse page redirect them to the signin page\nexport function ProtectedRoute({user, children, ...rest}) {\n  return (\n    <Route \n      {...rest}\n      render={console.log({ location })}\n    />\n  )\n}"]},"metadata":{},"sourceType":"module"}