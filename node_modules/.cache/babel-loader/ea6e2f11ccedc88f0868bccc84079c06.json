{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useContext } from \"react\";\nimport { FirebaseContext } from \"../context/firebase\";\nexport default function useContent(target) {\n  _s();\n\n  const [content, setContent] = useState([]);\n  const {\n    firebase\n  } = useContext(FirebaseContext);\n  useEffect(() => {\n    firebase.firestore().collection(target).get().then(resp => {\n      const allContent = resp.docs.map(contentObj => ({ ...contentObj.data(),\n        docId: contentObj.id\n      }));\n      setContent(allContent);\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }, []);\n  return {\n    [target]: firebase\n  };\n}\n\n_s(useContent, \"boi4fmIVcpnSth5fuOFCbAcDMo8=\");","map":{"version":3,"sources":["/home/makss99/Desktop/react/practice/netflix-clone/src/hooks/use-content.js"],"names":["useEffect","useState","useContext","FirebaseContext","useContent","target","content","setContent","firebase","firestore","collection","get","then","resp","allContent","docs","map","contentObj","data","docId","id","catch","error","console","message"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,eAAT,QAAgC,qBAAhC;AAEA,eAAe,SAASC,UAAT,CAAoBC,MAApB,EAA4B;AAAA;;AACzC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAeN,UAAU,CAACC,eAAD,CAA/B;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CACLC,SADH,GAEGC,UAFH,CAEcL,MAFd,EAGGM,GAHH,GAIGC,IAJH,CAIQC,IAAI,IAAI;AACZ,YAAMC,UAAU,GAAGD,IAAI,CAACE,IAAL,CAAUC,GAAV,CAAcC,UAAU,KAAK,EAC9C,GAAGA,UAAU,CAACC,IAAX,EAD2C;AAE9CC,QAAAA,KAAK,EAAEF,UAAU,CAACG;AAF4B,OAAL,CAAxB,CAAnB;AAKAb,MAAAA,UAAU,CAACO,UAAD,CAAV;AACD,KAXH,EAYGO,KAZH,CAYSC,KAAK,IAAI;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB;AACD,KAdH;AAeD,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,SAAO;AAAE,KAACnB,MAAD,GAAUG;AAAZ,GAAP;AACD;;GAvBuBJ,U","sourcesContent":["import { useEffect, useState, useContext } from \"react\"\nimport { FirebaseContext } from \"../context/firebase\"\n\nexport default function useContent(target) {\n  const [content, setContent] = useState([])\n  const { firebase } = useContext(FirebaseContext)\n\n  useEffect(() => {\n    firebase\n      .firestore()\n      .collection(target)\n      .get()\n      .then(resp => {\n        const allContent = resp.docs.map(contentObj => ({\n          ...contentObj.data(),\n          docId: contentObj.id\n        }))\n\n        setContent(allContent)\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }, [])\n\n  return { [target]: firebase}\n}"]},"metadata":{},"sourceType":"module"}