{"ast":null,"code":"import _slicedToArray from\"/home/makss99/Desktop/react/practice/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/home/makss99/Desktop/react/practice/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/home/makss99/Desktop/react/practice/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import{createContext,useContext,useState}from\"react\";import{Inner,Title,Wrapper,InputInner,Input,Label,WarningInner,Warning,Button,InputWrapper}from\"./styles/opt-form\";// This is to get the value of input lengh to the Label\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ToggleContext=/*#__PURE__*/createContext();export default function OptForm(_ref){var children=_ref.children,restProps=_objectWithoutProperties(_ref,[\"children\"]);return/*#__PURE__*/_jsx(Inner,{children:children});}OptForm.Title=function OptFormTitle(_ref2){var children=_ref2.children,restProps=_objectWithoutProperties(_ref2,[\"children\"]);return/*#__PURE__*/_jsx(Title,_objectSpread(_objectSpread({},restProps),{},{children:children}));};OptForm.Wrapper=function OptFormWrapper(_ref3){var children=_ref3.children,restProps=_objectWithoutProperties(_ref3,[\"children\"]);return/*#__PURE__*/_jsx(Wrapper,_objectSpread(_objectSpread({},restProps),{},{children:children}));};OptForm.InputWrapper=function OptFormInputWrapper(_ref4){var children=_ref4.children,restProps=_objectWithoutProperties(_ref4,[\"children\"]);// Set the useState to count input.value.length\nvar _useState=useState(0),_useState2=_slicedToArray(_useState,2),valueCount=_useState2[0],setValueCount=_useState2[1];return/*#__PURE__*/_jsx(ToggleContext.Provider,{value:{valueCount:valueCount,setValueCount:setValueCount},children:/*#__PURE__*/_jsxs(InputWrapper,_objectSpread(_objectSpread({},restProps),{},{children:[\" \",children,\" \"]}))});};OptForm.InputInner=function OptFormInputInner(_ref5){var children=_ref5.children,restProps=_objectWithoutProperties(_ref5,[\"children\"]);return/*#__PURE__*/_jsx(InputInner,_objectSpread(_objectSpread({},restProps),{},{children:children}));};OptForm.Input=function OptFormInput(_ref6){var restProps=Object.assign({},_ref6);var _useContext=useContext(ToggleContext),setValueCount=_useContext.setValueCount;// On change of an input putting the length in useState\nreturn/*#__PURE__*/_jsx(Input,_objectSpread({onChange:function onChange(e){return setValueCount(e.target.value);}},restProps));};OptForm.Label=function OptFormLabel(_ref7){var children=_ref7.children,restProps=_objectWithoutProperties(_ref7,[\"children\"]);// Getting the value.length\nvar _useContext2=useContext(ToggleContext),valueCount=_useContext2.valueCount;var label_active={color:\"gray\",fontWeight:\"bold\",fontSize:\"0.75rem\",top:\"25%\"};// Gonna check if the value of the count is > 0 we wanna keep the label at the top\n// So when you click of it it dosen't drop back on your text\nreturn/*#__PURE__*/_jsx(Label,_objectSpread(_objectSpread({style:valueCount.length>0?label_active:null},restProps),{},{children:children}));};OptForm.WarningInner=function OptFormWarningInner(_ref8){var children=_ref8.children,restProps=_objectWithoutProperties(_ref8,[\"children\"]);return/*#__PURE__*/_jsx(WarningInner,_objectSpread(_objectSpread({},restProps),{},{children:children}));};OptForm.Warning=function OptFormWarning(_ref9){var children=_ref9.children,restProps=_objectWithoutProperties(_ref9,[\"children\"]);// Here we need to check if the email is typed in and if its correct form and shape\nvar _useContext3=useContext(ToggleContext),valueCount=_useContext3.valueCount;// This is just to check if the email is valid\nvar re=/^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;return/*#__PURE__*/_jsxs(Warning,_objectSpread(_objectSpread({},restProps),{},{children:[valueCount.length<5?/*#__PURE__*/_jsx(\"p\",{children:\"Email is required!\"}):null,valueCount.length>=5&&!re.test(String(valueCount).toLowerCase())?/*#__PURE__*/_jsx(\"p\",{children:\"Please enter a valid email address\"}):null]}));};OptForm.Button=function OptFormButton(_ref10){var children=_ref10.children,restProps=_objectWithoutProperties(_ref10,[\"children\"]);return/*#__PURE__*/_jsxs(Button,_objectSpread(_objectSpread({},restProps),{},{children:[children,\" \",/*#__PURE__*/_jsx(\"img\",{src:\"images/icons/chevron-right.png\"})]}));};","map":{"version":3,"sources":["/home/makss99/Desktop/react/practice/netflix-clone/src/components/opt-form/index.js"],"names":["createContext","useContext","useState","Inner","Title","Wrapper","InputInner","Input","Label","WarningInner","Warning","Button","InputWrapper","ToggleContext","OptForm","children","restProps","OptFormTitle","OptFormWrapper","OptFormInputWrapper","valueCount","setValueCount","OptFormInputInner","OptFormInput","e","target","value","OptFormLabel","label_active","color","fontWeight","fontSize","top","length","OptFormWarningInner","OptFormWarning","re","test","String","toLowerCase","OptFormButton"],"mappings":"8gBAAA,OAASA,aAAT,CAAwBC,UAAxB,CAAoCC,QAApC,KAAoD,OAApD,CAEA,OACEC,KADF,CAEEC,KAFF,CAGEC,OAHF,CAIEC,UAJF,CAKEC,KALF,CAMEC,KANF,CAOEC,YAPF,CAQEC,OARF,CASEC,MATF,CAUEC,YAVF,KAWO,mBAXP,CAaA;wFACA,GAAMC,CAAAA,aAAa,cAAGb,aAAa,EAAnC,CAEA,cAAe,SAASc,CAAAA,OAAT,MAA6C,IAA1BC,CAAAA,QAA0B,MAA1BA,QAA0B,CAAbC,SAAa,6CAC1D,mBAAO,KAAC,KAAD,WAAQD,QAAR,EAAP,CACD,CAEDD,OAAO,CAACV,KAAR,CAAgB,QAASa,CAAAA,YAAT,OAAkD,IAA1BF,CAAAA,QAA0B,OAA1BA,QAA0B,CAAbC,SAAa,8CAChE,mBAAO,KAAC,KAAD,gCAAWA,SAAX,eAAuBD,QAAvB,GAAP,CACD,CAFD,CAIAD,OAAO,CAACT,OAAR,CAAkB,QAASa,CAAAA,cAAT,OAAoD,IAA1BH,CAAAA,QAA0B,OAA1BA,QAA0B,CAAbC,SAAa,8CACpE,mBAAO,KAAC,OAAD,gCAAaA,SAAb,eAAyBD,QAAzB,GAAP,CACD,CAFD,CAIAD,OAAO,CAACF,YAAR,CAAuB,QAASO,CAAAA,mBAAT,OAGpB,IAFDJ,CAAAA,QAEC,OAFDA,QAEC,CADEC,SACF,8CACD;AACA,cAAoCd,QAAQ,CAAC,CAAD,CAA5C,wCAAOkB,UAAP,eAAmBC,aAAnB,eAEA,mBACE,KAAC,aAAD,CAAe,QAAf,EAAwB,KAAK,CAAE,CAAED,UAAU,CAAVA,UAAF,CAAcC,aAAa,CAAbA,aAAd,CAA/B,uBACE,MAAC,YAAD,gCAAkBL,SAAlB,oBAA+BD,QAA/B,QADF,EADF,CAKD,CAZD,CAcAD,OAAO,CAACR,UAAR,CAAqB,QAASgB,CAAAA,iBAAT,OAAqD,IAAzBP,CAAAA,QAAyB,OAAzBA,QAAyB,CAAZC,SAAY,8CACxE,mBAAO,KAAC,UAAD,gCAAgBA,SAAhB,eAA6BD,QAA7B,GAAP,CACD,CAFD,CAIAD,OAAO,CAACP,KAAR,CAAgB,QAASgB,CAAAA,YAAT,OAAwC,IAAbP,CAAAA,SAAa,yBACtD,gBAA0Bf,UAAU,CAACY,aAAD,CAApC,CAAQQ,aAAR,aAAQA,aAAR,CAEA;AACA,mBACE,KAAC,KAAD,gBAAO,QAAQ,CAAE,kBAACG,CAAD,QAAOH,CAAAA,aAAa,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAApB,EAAjB,EAA2DV,SAA3D,EADF,CAGD,CAPD,CASAF,OAAO,CAACN,KAAR,CAAgB,QAASmB,CAAAA,YAAT,OAAkD,IAA1BZ,CAAAA,QAA0B,OAA1BA,QAA0B,CAAbC,SAAa,8CAChE;AACA,iBAAuBf,UAAU,CAACY,aAAD,CAAjC,CAAQO,UAAR,cAAQA,UAAR,CAEA,GAAMQ,CAAAA,YAAY,CAAG,CACnBC,KAAK,CAAE,MADY,CAEnBC,UAAU,CAAE,MAFO,CAGnBC,QAAQ,CAAE,SAHS,CAInBC,GAAG,CAAE,KAJc,CAArB,CAOA;AACA;AACA,mBACE,KAAC,KAAD,8BAAO,KAAK,CAAEZ,UAAU,CAACa,MAAX,CAAoB,CAApB,CAAwBL,YAAxB,CAAuC,IAArD,EAA+DZ,SAA/D,eACGD,QADH,GADF,CAKD,CAlBD,CAoBAD,OAAO,CAACL,YAAR,CAAuB,QAASyB,CAAAA,mBAAT,OAAuD,IAAzBnB,CAAAA,QAAyB,OAAzBA,QAAyB,CAAZC,SAAY,8CAC5E,mBAAO,KAAC,YAAD,gCAAkBA,SAAlB,eAA+BD,QAA/B,GAAP,CACD,CAFD,CAIAD,OAAO,CAACJ,OAAR,CAAkB,QAASyB,CAAAA,cAAT,OAAoD,IAA1BpB,CAAAA,QAA0B,OAA1BA,QAA0B,CAAbC,SAAa,8CACpE;AACA,iBAAqBf,UAAU,CAACY,aAAD,CAA/B,CAAOO,UAAP,cAAOA,UAAP,CAEA;AACA,GAAMgB,CAAAA,EAAE,CAAG,sHAAX,CAEA,mBAAO,MAAC,OAAD,gCAAapB,SAAb,gBAEJI,UAAU,CAACa,MAAX,CAAoB,CAApB,cAAwB,yCAAxB,CAAoD,IAFhD,CAIJb,UAAU,CAACa,MAAX,EAAqB,CAArB,EAA0B,CAACG,EAAE,CAACC,IAAH,CAAQC,MAAM,CAAClB,UAAD,CAAN,CAAmBmB,WAAnB,EAAR,CAA3B,cAAuE,yDAAvE,CAAmH,IAJ/G,IAAP,CAMD,CAbD,CAeAzB,OAAO,CAACH,MAAR,CAAiB,QAAS6B,CAAAA,aAAT,QAAmD,IAA1BzB,CAAAA,QAA0B,QAA1BA,QAA0B,CAAbC,SAAa,+CAClE,mBACE,MAAC,MAAD,gCAAYA,SAAZ,gBACGD,QADH,kBACa,YAAK,GAAG,CAAC,gCAAT,EADb,IADF,CAKD,CAND","sourcesContent":["import { createContext, useContext, useState } from \"react\"\n\nimport {\n  Inner,\n  Title,\n  Wrapper,\n  InputInner,\n  Input,\n  Label,\n  WarningInner,\n  Warning,\n  Button,\n  InputWrapper,\n} from \"./styles/opt-form\"\n\n// This is to get the value of input lengh to the Label\nconst ToggleContext = createContext()\n\nexport default function OptForm({ children, ...restProps }) {\n  return <Inner>{children}</Inner>\n}\n\nOptForm.Title = function OptFormTitle({ children, ...restProps }) {\n  return <Title {...restProps}>{children}</Title>\n}\n\nOptForm.Wrapper = function OptFormWrapper({ children, ...restProps }) {\n  return <Wrapper {...restProps}>{children}</Wrapper>\n}\n\nOptForm.InputWrapper = function OptFormInputWrapper({\n  children,\n  ...restProps\n}) {\n  // Set the useState to count input.value.length\n  const [valueCount, setValueCount] = useState(0)\n\n  return (\n    <ToggleContext.Provider value={{ valueCount, setValueCount }}>\n      <InputWrapper {...restProps}> {children} </InputWrapper>\n    </ToggleContext.Provider>\n  )\n}\n\nOptForm.InputInner = function OptFormInputInner({children, ...restProps}) {\n  return <InputInner {...restProps} >{children}</InputInner>\n}\n\nOptForm.Input = function OptFormInput({ ...restProps }) {\n  const { setValueCount } = useContext(ToggleContext)\n\n  // On change of an input putting the length in useState\n  return (\n    <Input onChange={(e) => setValueCount(e.target.value)} {...restProps} />\n  )\n}\n\nOptForm.Label = function OptFormLabel({ children, ...restProps }) {\n  // Getting the value.length\n  const { valueCount } = useContext(ToggleContext)\n\n  const label_active = {\n    color: \"gray\",\n    fontWeight: \"bold\",\n    fontSize: \"0.75rem\",\n    top: \"25%\",\n  }\n\n  // Gonna check if the value of the count is > 0 we wanna keep the label at the top\n  // So when you click of it it dosen't drop back on your text\n  return (\n    <Label style={valueCount.length > 0 ? label_active : null} {...restProps}>\n      {children}\n    </Label>\n  )\n}\n\nOptForm.WarningInner = function OptFormWarningInner({children, ...restProps}) {\n  return <WarningInner {...restProps} >{children}</WarningInner>\n}\n\nOptForm.Warning = function OptFormWarning({ children, ...restProps }) {\n  // Here we need to check if the email is typed in and if its correct form and shape\n  const {valueCount} = useContext(ToggleContext)\n\n  // This is just to check if the email is valid\n  const re = /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n\n  return <Warning {...restProps}>\n    {/* Here we want to check if the email is entered at least 5 characters  */}\n    {valueCount.length < 5 ? <p>Email is required!</p> : null}\n    {/*  */}\n    {valueCount.length >= 5 && !re.test(String(valueCount).toLowerCase()) ? <p>Please enter a valid email address</p> : null}\n  </Warning>\n}\n\nOptForm.Button = function OptFormButton({ children, ...restProps }) {\n  return (\n    <Button {...restProps}>\n      {children} <img src=\"images/icons/chevron-right.png\" />\n    </Button>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}